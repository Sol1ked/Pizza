{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  totalPrice: 0,\n  items: localStorage.getItem('cart')\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addProductInCart(state, action) {\n      const findItem = state.items.find(item => item.id === action.payload.id);\n      if (findItem) {\n        findItem.count++;\n      } else {\n        state.items.push({\n          ...action.payload,\n          count: 1\n        });\n      }\n      state.totalPrice = state.items.reduce((sum, obj) => {\n        return obj.price * obj.count + sum;\n      }, 0);\n    },\n    minusProduct(state, action) {\n      const findItem = state.items.find(item => item.id === action.payload);\n      if (findItem) {\n        findItem.count--;\n        state.totalPrice -= findItem.price;\n      }\n    },\n    removeProductFromCart(state, action) {\n      state.items = state.items.filter(item => item.id !== action.payload);\n    },\n    clearAllProducts(state) {\n      state.items.length = 0;\n      state.totalPrice = 0;\n    }\n  }\n});\nexport const selectCart = state => state.cart;\nexport const selectCartItemById = id => state => {\n  return state.cart.items.find(item => item.id === id);\n};\nexport const {\n  addProductInCart,\n  removeProductFromCart,\n  clearAllProducts,\n  minusProduct\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","totalPrice","items","localStorage","getItem","cartSlice","name","reducers","addProductInCart","state","action","findItem","find","item","id","payload","count","push","reduce","sum","obj","price","minusProduct","removeProductFromCart","filter","clearAllProducts","length","selectCart","cart","selectCartItemById","actions","reducer"],"sources":["C:/Users/aprim/Рабочий стол/pizza/src/redux/slices/cartSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\n\r\nexport type CartItem = {\r\n  id: string;\r\n  title: string;\r\n  price: number;\r\n  imageUrl: string;\r\n  size: number;\r\n  type: string;\r\n  count: number;\r\n};\r\n\r\ninterface CartSliceState {\r\n  totalPrice: number;\r\n  items: CartItem[];\r\n}\r\n\r\nconst initialState: CartSliceState = {\r\n  totalPrice: 0,\r\n  items: localStorage.getItem('cart'),\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    addProductInCart(state, action: PayloadAction<CartItem>) {\r\n      const findItem = state.items.find((item) => item.id === action.payload.id);\r\n      if (findItem) {\r\n        findItem.count++;\r\n      } else {\r\n        state.items.push({\r\n          ...action.payload,\r\n          count: 1,\r\n        });\r\n      }\r\n\r\n      state.totalPrice = state.items.reduce((sum, obj) => {\r\n        return obj.price * obj.count + sum;\r\n      }, 0);\r\n    },\r\n\r\n    minusProduct(state, action: PayloadAction<string>) {\r\n      const findItem = state.items.find((item) => item.id === action.payload);\r\n      if (findItem) {\r\n        findItem.count--;\r\n        state.totalPrice -= findItem.price;\r\n      }\r\n    },\r\n\r\n    removeProductFromCart(state, action: PayloadAction<string>) {\r\n      state.items = state.items.filter((item) => item.id !== action.payload);\r\n    },\r\n\r\n    clearAllProducts(state) {\r\n      state.items.length = 0;\r\n      state.totalPrice = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectCart = (state: RootState) => state.cart;\r\nexport const selectCartItemById = (id: string) => (state: RootState) => {\r\n  return state.cart.items.find((item) => item.id === id);\r\n};\r\n\r\nexport const { addProductInCart, removeProductFromCart, clearAllProducts, minusProduct } =\r\n  cartSlice.actions;\r\nexport default cartSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAkB7D,MAAMC,YAA4B,GAAG;EACnCC,UAAU,EAAE,CAAC;EACbC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,MAAM;AACpC,CAAC;AAED,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC5BO,IAAI,EAAE,MAAM;EACZN,YAAY;EACZO,QAAQ,EAAE;IACRC,gBAAgBA,CAACC,KAAK,EAAEC,MAA+B,EAAE;MACvD,MAAMC,QAAQ,GAAGF,KAAK,CAACP,KAAK,CAACU,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MAC1E,IAAIH,QAAQ,EAAE;QACZA,QAAQ,CAACK,KAAK,EAAE;MAClB,CAAC,MAAM;QACLP,KAAK,CAACP,KAAK,CAACe,IAAI,CAAC;UACf,GAAGP,MAAM,CAACK,OAAO;UACjBC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;MAEAP,KAAK,CAACR,UAAU,GAAGQ,KAAK,CAACP,KAAK,CAACgB,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;QAClD,OAAOA,GAAG,CAACC,KAAK,GAAGD,GAAG,CAACJ,KAAK,GAAGG,GAAG;MACpC,CAAC,EAAE,CAAC,CAAC;IACP,CAAC;IAEDG,YAAYA,CAACb,KAAK,EAAEC,MAA6B,EAAE;MACjD,MAAMC,QAAQ,GAAGF,KAAK,CAACP,KAAK,CAACU,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MACvE,IAAIJ,QAAQ,EAAE;QACZA,QAAQ,CAACK,KAAK,EAAE;QAChBP,KAAK,CAACR,UAAU,IAAIU,QAAQ,CAACU,KAAK;MACpC;IACF,CAAC;IAEDE,qBAAqBA,CAACd,KAAK,EAAEC,MAA6B,EAAE;MAC1DD,KAAK,CAACP,KAAK,GAAGO,KAAK,CAACP,KAAK,CAACsB,MAAM,CAAEX,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;IACxE,CAAC;IAEDU,gBAAgBA,CAAChB,KAAK,EAAE;MACtBA,KAAK,CAACP,KAAK,CAACwB,MAAM,GAAG,CAAC;MACtBjB,KAAK,CAACR,UAAU,GAAG,CAAC;IACtB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM0B,UAAU,GAAIlB,KAAgB,IAAKA,KAAK,CAACmB,IAAI;AAC1D,OAAO,MAAMC,kBAAkB,GAAIf,EAAU,IAAML,KAAgB,IAAK;EACtE,OAAOA,KAAK,CAACmB,IAAI,CAAC1B,KAAK,CAACU,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;AACxD,CAAC;AAED,OAAO,MAAM;EAAEN,gBAAgB;EAAEe,qBAAqB;EAAEE,gBAAgB;EAAEH;AAAa,CAAC,GACtFjB,SAAS,CAACyB,OAAO;AACnB,eAAezB,SAAS,CAAC0B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}